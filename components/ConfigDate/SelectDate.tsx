"use client";

import React, { useState } from "react";
import Calendar from "../User/Request/Calender/Calender";
import CurrenInfoSelect from "../User/Request/Input/CurrenInfoSelect";
import CurrenInfoBtn from "../User/Request/Button/CurrenInfoBtn";
import { FaSave } from "react-icons/fa";
import Swal from "sweetalert2";
import axios from "axios";
import api from "@/utils/api";


interface ISelectDateProps {
  refreshTable: () => void; 
}

const SelectDate = (props : ISelectDateProps) => {

  const { refreshTable } = props
  const [formData, setFormData] = useState<{ [key: string]: string }>({});
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  const handleDateChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }));

    if (name === "closeDate" && formData["openDate"] && value < formData["openDate"]) {
      setError("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î");
    } else {
      setError(null);
    }
  };

  const resetForm = () => {
    setFormData({}); 
    setError(null);  
  };

  const handleSelectChange = (name: string, value: string | number) => {
    setFormData((prev) => ({ ...prev, [name]: String(value) }));
  };


  // üî• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì "‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÇ‡∏¢‡∏Å‡∏¢‡πâ‡∏≤‡∏¢" ‡πÄ‡∏õ‡πá‡∏ô ‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ¬±5 ‡∏õ‡∏µ
  const currentYear = new Date().getFullYear();
  const yearOptions = Array.from({ length: 11 }, (_, i) => ({
    value: (currentYear - 5 + i).toString(),
    label: (currentYear - 5 + i).toString(),
  }));

  // üî• ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏¢‡∏Å‡∏¢‡πâ‡∏≤‡∏¢"
  const roundOptions = [
    { value: "1", label: "‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1" },
    { value: "2", label: "‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2" },
    { value: "3", label: "‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 3" },
    { value: "4", label: "‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 4" },
  ];

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const handleSubmit = async () => {
    const { openDate, closeDate, round, year } = formData;

    if (!openDate || !closeDate || !round || !year) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö!",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á",
        confirmButtonColor: "#F39C12",
      });
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î
    if (closeDate < openDate) {
      Swal.fire({
        icon: "error",
        title: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!",
        text: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î",
        confirmButtonColor: "#E53935",
      });
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î" ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î"
    if (closeDate === openDate) {
      Swal.fire({
        icon: "error",
        title: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!",
        text: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î",
        confirmButtonColor: "#E53935",
      });
      return;
    }

    setLoading(true);

    try {
      const payload = {
        round: Number(round), 
        year: Number(year), 
        start_date: openDate,
        end_date: closeDate,
      };

      const response = await api.post(`${process.env.NEXT_PUBLIC_BASE_URL}/date/create`, payload);

      Swal.fire({
        icon: "success",
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
        confirmButtonColor: "#4CAF50",
      });
      resetForm();
      refreshTable()

    } catch (err) {
      console.error("‚ùå API Error:", err);
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        confirmButtonColor: "#E53935",
      });
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");

    } finally {
      setLoading(false); 
    }
  };

  return (
    <div className="flex flex-col gap-y-4">
      <div className="flex gap-x-8 items-end">
        <div className="flex flex-col gap-y-2">
          <div>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î</div>
          <Calendar
            name="openDate"
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠"
            onChange={handleDateChange}
            value={formData["openDate"] || ""}
            width={200}
            height={35}
          />
        </div>
        <div className="flex flex-col gap-y-2">
          <div>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î</div>
          <Calendar
            name="closeDate"
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠"
            onChange={handleDateChange}
            value={formData["closeDate"] || ""}
            width={200}
            height={35}
          />
        </div>
        <div className="flex flex-col gap-y-2">
          <div>‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏¢‡∏Å‡∏¢‡πâ‡∏≤‡∏¢</div>
          <CurrenInfoSelect
            IsSearch={false}
            name="round"
            height={35}
            width={100}
            options={roundOptions}
            onChange={handleSelectChange}
            value={formData["round"] || ""}
          />
        </div>
        <div className="flex flex-col gap-y-2">
          <div>‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÇ‡∏¢‡∏Å‡∏¢‡πâ‡∏≤‡∏¢</div>
          <CurrenInfoSelect
            IsSearch={false}
            name="year"
            height={35}
            width={100}
            options={yearOptions}
            onChange={handleSelectChange} // ‚úÖ ‡πÉ‡∏ä‡πâ `onChange` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô `formData`
            value={formData["year"] || ""}
          />
        </div>
        <div className="flex items-center">
          {error ? <CurrenInfoBtn
            className="text-white bg-[#4868AC] hover:bg-[#1A8CFF] transition-colors duration-200 rounded-xl"
            label="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
            height={40}
            type="button"
            icon={<FaSave />}
            onClick={handleSubmit}
            disable={true} // ‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß `console.log()` ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          /> :
            <CurrenInfoBtn
              className="text-white bg-[#4868AC] hover:bg-[#1A8CFF] transition-colors duration-200 rounded-xl"
              label="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
              height={40}
              type="button"
              icon={<FaSave />}
              onClick={handleSubmit}
              disable={loading}
            />
          }
        </div>
      </div>

      {/* üî¥ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
      {error && <div className="text-red-500">{error}</div>}
    </div>
  );
};

export default SelectDate;
